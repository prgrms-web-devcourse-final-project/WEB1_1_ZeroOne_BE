//file:noinspection GroovyAssignabilityCheck
//file:noinspection VulnerableLibrariesLocal
plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.5'
    id 'io.spring.dependency-management' version '1.1.6'

    // 테코 커버리지 분석
    id 'jacoco'
    id "org.sonarqube" version "5.1.0.4882"
}

group = 'com'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'

    // Swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'

    // QueryDSL
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // AWS S3
    implementation 'io.awspring.cloud:spring-cloud-starter-aws:2.4.4'
    implementation 'com.amazonaws:aws-java-sdk-s3:1.12.765'
    implementation 'javax.xml.bind:jaxb-api:2.4.0-b180830.0359'

    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.12.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.5'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    useJUnitPlatform()
    ignoreFailures = true

    finalizedBy 'jacocoTestReport'
}

def QDomains = []
for (qPattern in '*.QA'..'*.QZ') {
    QDomains.add(qPattern + '*')
}

def jacocoExcludePatterns = [
        '**/*Application*',
        '**/*Config*',
        '**/oauth/**',
        '**/filters/**',
        '**/handler/**',
        '**/*Exception*', '**/exception/**',
        '**/dto/**',
        '**/*Request*', '**/request/**',
        '**/*Response*', '**/response/**',
        '**/domain/**', '**/entity/**',
        '**/repository/**',

]

// jacocoTestReport 구성
jacocoTestReport {
    dependsOn test

    reports {
        html.required = true
        xml.required = true
        csv.required = true
    }

    // coverage 분석에 포함시키지 않을 항목들
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, excludes: jacocoExcludePatterns + QDomains)
        }))
    }
}

// gradlew 에 sonar task 구성
sonar {
    properties {
        property "sonar.projectKey", "prgrms-web-devcourse-final-project_WEB1_1_ZeroOne_BE"
        property "sonar.organization", "prgrms-web-devcourse-final-project"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.language", "java"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.sources", "src/main/java"
        property "sonar.tests", "src/test/java"

        // jacocoTestReport 수행 시 test report xml 파일 위치 (중요)
        property 'sonar.coverage.jacoco.xmlReportPaths', 'build/reports/jacoco/test/jacocoTestReport.xml'
        property "sonar.test.inclusions", "**/*Test.java"
        property "sonar.text.exclusions", jacocoExcludePatterns.join(',')
        property "sonar.coverage.exclusions", jacocoExcludePatterns.join(',')
        property "sonar.java.coveragePlugin", 'jacoco'
    }
}